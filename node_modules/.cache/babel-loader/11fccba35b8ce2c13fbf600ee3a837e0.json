{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@material-ui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nexport default function useMediaQuery(queryInput) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: {},\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, options);\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["D:/Users/jasmi/Academic/Spring-2022/Software_Engineering/Repositories/se_project_2022/node_modules/@material-ui/core/useMediaQuery/useMediaQuery.js"],"names":["_extends","React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQuery","queryInput","options","theme","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","match","setMatch","useState","matches","active","undefined","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@material-ui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: {},\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, options);\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"]},"metadata":{},"sourceType":"module"}